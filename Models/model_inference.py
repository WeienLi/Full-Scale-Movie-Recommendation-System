import json
import os
import sys

import tensorflow as tf
import tensorflow_recommenders as tfrs
import numpy as np
import pandas as pd
from typing import Dict, Text
from datetime import datetime

from utils.ranking_model_inference import get_model
from utils.user_age import binAge
from utils.input_ranking import inputRanking


def recommendMovies(userID, user_age, user_occupation, user_gender):
    
    '''Get a list of recommended movies for a given user ID, user age, user occupation and user_gender '''
    '''Inputs: userID (string), user_age(float), user_occupation(string), user_gender(string)'''
  
    age_binned = binAge(user_age)
    
    user = {
        'user_age_binned': tf.constant([age_binned]),
        'user_gender': tf.constant([user_gender]) ,
        'user_id': tf.constant([userID]),
        'user_occupation': tf.constant([user_occupation]) }
    
    # retrieval candidates
    _, titles = model_retrieval(user)

    print('list of candidates generated by retrieval model')

    # format candidates
    titles_decode = list(titles[0][:].numpy())
    titles_decode = [x.decode('UTF8') for x in titles_decode]
    candidates = movies[movies['movieID'].isin(titles_decode)]

    # getting ratings predictions for the candidates   
    pred_ratings = np.zeros((200,))
    for i in range(200):
        input = inputRanking(userID, age_binned, user_gender, user_occupation, candidates, i)
        pred_ratings[i] = model_ranking(input)

    # ordering ratings    
    order = np.argsort(-pred_ratings)[0:20]
    pred_movies = list(titles[0].numpy()[list(order)])
    pred_movies = [x.decode('UTF8') for x in pred_movies]
    
    print('final list generated based on ranking model predictions')
    
    #print('pred movies:')
    #print(pred_movies)

    return pred_movies
    

def init():
    '''Initialize the model'''

    global model_retrieval
    global model_ranking
    global movies
    
    model_retrieval = tf.saved_model.load('model_retrieval')
    print('model retrieval loaded')
    
    model_ranking =  get_model()
    model_ranking.load_weights("model_rank/ranking.ckpt")
    print('model ranking loaded')
    
    movies = pd.read_csv('../Datasets/data_movie_processed.csv', sep=';')
    print('movie features loaded')

    # example: recommendMovies(userID='177165', user_age=25, user_occupation='college/grad student', user_gender='M')


init()